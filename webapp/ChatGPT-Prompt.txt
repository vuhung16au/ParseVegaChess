Prompt

```
import re

def parse_chess_results(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()

    results = []
    player_pattern = re.compile(r'^\s*(\d+)\s+([^\d]+?)\s+(\d+)\s+(\w*)\s+(\w+)\s+(\d+\.\d)\s+\|(.+)\|')

    for line in lines:
        match = player_pattern.match(line)
        if match:
            pos, name, rating, title, fed, points, rounds = match.groups()
            round_results = rounds.strip().split()
            parsed_results = []
            for result in round_results:
                match_result = re.match(r'([+=-])([WB])(\d+)', result)
                if match_result:
                    outcome, color, opponent = match_result.groups()
                    parsed_results.append({
                        'outcome': outcome,
                        'color': color,
                        'opponent': int(opponent)
                    })
            player_data = {
                'Pos': int(pos),
                'Name': name.strip(),
                'Rtg': int(rating),
                'T': title.strip(),
                'Fed': fed,
                'Pts': float(points),
                'Rounds': parsed_results
            }
            results.append(player_data)
    
    return results

def get_player_results(results, position):
    player_results = None
    for player in results:
        if player['Pos'] == position:
            player_results = player
            break
    
    if not player_results:
        return f"No player found with position {position}"
    
    opponent_info = []
    for i, round_info in enumerate(player_results['Rounds']):
        opponent_position = round_info['opponent']
        opponent = next((p for p in results if p['Pos'] == opponent_position), None)
        if opponent:
            opponent_info.append({
                'round': i + 1,
                'opponent_name': opponent['Name'],
                'opponent_position': opponent['Pos'],
                'result': round_info['outcome'],
                'color': round_info['color']
            })
    
    return opponent_info

def print_round(results, round_number):
    pairings = []
    
    for player in results:
        for i, round_info in enumerate(player['Rounds']):
            if i + 1 == round_number:
                opponent_position = round_info['opponent']
                opponent = next((p for p in results if p['Pos'] == opponent_position), None)
                if opponent:
                    pairings.append({
                        'player': player['Name'],
                        'opponent': opponent['Name'],
                        'result': round_info['outcome'],
                        'color': round_info['color']
                    })
    
    if not pairings:
        print(f"No pairings found for round {round_number}")
        return
    
    print(f"Pairings for round {round_number}:")
    for pairing in pairings:
        print(f"{pairing['player']} vs {pairing['opponent']} ({pairing['color']}, result: {pairing['result']})")


# filename = '2024citySydneyBlitz.txt'
filename = '2024NSWRapid.txt'
parsed_results = parse_chess_results(filename)

# Print the pairing for a round
# round_number = int(input("Enter the round number: "))
# print_round(parsed_results, round_number)

# print all players
# for result in parsed_results:
#     print(result)
    
# pos_list = [1, 2, 3, 4, 10, 20]

# for position in pos_list:
#    print("player " + str(position) + ":")
#    player_results = get_player_results(parsed_results, position)
#     for result in player_results:
#         print(result)

position = int(input("Enter the player number: "))

print("player " + str(position) + ":")
player_results = get_player_results(parsed_results, position)
for result in player_results:
    print(result)

``` 

Migrate this console (CLI) program into a Flask (web-based) app 

ChatGPT response:

To migrate the console-based (CLI) program into a Flask web-based app, you need to create a Flask application that allows users to upload the Vega file, select a player position, and view the results in a web interface. Here are the steps to achieve this:

1. **Install Flask**: If you haven't already, you can install Flask using pip:

   ```sh
   pip install Flask
   ```

2. **Create the necessary directories and files**: Your project directory should look like this:

   ```
   project/
   ├── app.py
   ├── templates/
   │   ├── index.html
   │   └── player_results.html
   └── uploads/
   ```

3. **Create `app.py`**: This will be the main Flask application file.

4. **Create `index.html`**: This will be the main page where users can upload the file and input the player number.

5. **Create `player_results.html`**: This will be the page to display the player results.

6. **Create the `uploads/` directory**: This is where uploaded files will be temporarily stored.

Here is how you can implement this:

### `app.py`
```python
import os
import re
from flask import Flask, request, render_template, redirect, url_for, flash
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.secret_key = 'supersecretkey'
app.config['MAX_CONTENT_PATH'] = 1000000  # Maximum file size in bytes

def parse_chess_results(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()

    results = []
    player_pattern = re.compile(r'^\s*(\d+)\s+([^\d]+?)\s+(\d+)\s+(\w*)\s+(\w+)\s+(\d+\.\d)\s+\|(.+)\|')

    for line in lines:
        match = player_pattern.match(line)
        if match:
            pos, name, rating, title, fed, points, rounds = match.groups()
            round_results = rounds.strip().split()
            parsed_results = []
            for result in round_results:
                match_result = re.match(r'([+=-])([WB])(\d+)', result)
                if match_result:
                    outcome, color, opponent = match_result.groups()
                    parsed_results.append({
                        'outcome': outcome,
                        'color': color,
                        'opponent': int(opponent)
                    })
            player_data = {
                'Pos': int(pos),
                'Name': name.strip(),
                'Rtg': int(rating),
                'T': title.strip(),
                'Fed': fed,
                'Pts': float(points),
                'Rounds': parsed_results
            }
            results.append(player_data)
    
    return results

def get_player_results(results, position):
    player_results = None
    for player in results:
        if player['Pos'] == position:
            player_results = player
            break
    
    if not player_results:
        return f"No player found with position {position}"
    
    opponent_info = []
    for i, round_info in enumerate(player_results['Rounds']):
        opponent_position = round_info['opponent']
        opponent = next((p for p in results if p['Pos'] == opponent_position), None)
        if opponent:
            opponent_info.append({
                'round': i + 1,
                'opponent_name': opponent['Name'],
                'opponent_position': opponent['Pos'],
                'result': round_info['outcome'],
                'color': round_info['color']
            })
    
    return opponent_info

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # If user does not select file, browser also submit an empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            position = int(request.form['position'])
            parsed_results = parse_chess_results(filepath)
            player_results = get_player_results(parsed_results, position)
            return render_template('player_results.html', position=position, results=player_results)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
```

### `templates/index.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Results</title>
</head>
<body>
    <h1>Upload Chess Results File</h1>
    <form action="/" method="post" enctype="multipart/form-data">
        <label for="file">Choose Vega file to upload</label>
        <input type="file" id="file" name="file" accept=".txt">
        <br><br>
        <label for="position">Enter Player Position:</label>
        <input type="number" id="position" name="position" required>
        <br><br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
```

### `templates/player_results.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Player Results</title>
</head>
<body>
    <h1>Results for Player Position {{ position }}</h1>
    <table border="1">
        <thead>
            <tr>
                <th>Round</th>
                <th>Opponent Name</th>
                <th>Opponent Position</th>
                <th>Result</th>
                <th>Color</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
            <tr>
                <td>{{ result.round }}</td>
                <td>{{ result.opponent_name }}</td>
                <td>{{ result.opponent_position }}</td>
                <td>{{ result.result }}</td>
                <td>{{ result.color }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <br>
    <a href="/">Go Back</a>
</body>
</html>
```

### Running the App

1. **Ensure you are in the project directory**.

2. **Create the uploads directory**:

   ```sh
   mkdir uploads
   ```

3. **Run the Flask application**:

   ```sh
   python app.py
   ```

4. **Open your web browser and visit** `http://127.0.0.1:5000/`.

This will start the Flask application, allowing you to upload the Vega file, enter the player position, and view the results in your web browser.
